spread(a, name,test)
spread(a, class,test)
spread(a, grade,test)
spread(a, test,grade)
spread(a, test,name)
submit()
extrackt_numeric("class5")
extract_numeric("class5")
?mutate
?mutate
submit()
students4
?select
submit()
submit()
submit()
passed
failed
passed<-mutate(passed, status, "passed")
?mutate
passed<-mutate(passed, status= "passed")
passed<-mutate(failed, status= "failed")
failed<-mutate(passed, status= "passed")
failed<-mutate(failed, status= "failed")
rbind_list
?rbind_list
rbind_list(passed,failed)
sat
?select
?separate
submit()
submit()
submit()
submit()
?gather
?gather
submit()
?separate
submit()
submit()
?group_by
submit()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
todaty()
today()
today()
library(swirl)
swirl()
path2csv
mydf = read.csv2(path2csv, stringsAsFactors = FALSE)
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
?tbl_df
cran
rm(mydf)
rm("mydf")
cran
?manip
?select
cran
select(cran, ip_id, package, country)
5:20
cran
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
time
country
aff <- function (x) 3
aff <- function (x) {print x; 3}
-5:20
-(5:20)
cran
select(cran ,-(X:size))
filter(cran, package=="swirl")
filter(cran, r_version == "3.1.1", country== "US")
?Comparision
?Comparison
filter(cran, r_version <= "3.0.2", country== "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version !is.na())
filter(cran, r_version != is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
cran2 <- select(cran, size:ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, id_id, package, size)
cran3 <- select(cran, ip_id, package, size)
?deparse
?substitute
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
crsan <- tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean)
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <-filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
res <-gather(students2, sex_class, count)
res <-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
?separate
submit()
students3
submit()
?spread
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
submit()
spread(test, grade) %>%
e
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
students3
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
submit()
students4
submit()
submit()
submit()
submit()
passed
failded
failed
passed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
rbind_list(passed, failed)
sat
sat %>%
select(-contains(total))
sat %>%
select(-contains("total"))
?separate
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part, c("part", "sex")) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part, c("part", "sex"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
submit()
submit
()
submit()
Sys,getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
bye
bye()
quit()
moradia<-read.csv("Desktop/getdata_data_ss06hid.csv", h = T)
?strsplt
?strsplot
?strsplit
names(moradia)
strsplit(names(moradia), "wgtp")
strsplit(names(moradia), "wgtp")[123]
?read.csv
library(dplyr)
GDP<-tbl_df(read.csv("Desktop/getdata_data_GDP.csv", skip = 3, nrows = 191))
GDP
GDP<-GDP[-1,-c(3,6,7,8,9)]
GDP
GDP<-GDP[,-5]
GDP
?grep
?sub
gsub(",","",GDP$US.dollars.)
mean(gsub(",","",GDP$US.dollars.))
mean(as.numeric(gsub(",","",GDP$US.dollars.)))
GDP
grep("^United", GDP$US.dollars.)
grep("^United", GDP$Economy)
sum(grepl("^United", GDP$Economy))
educ<-tbl_df(read.csv("Desktop/getdata_data_EDSTATS_Country.csv", h = T))
educ
?merge
educ
GDP
dados<-merge(GDP, educ, by.x = "X", by.y = "CountryCode")
dados
dados<-tbl_df(merge(GDP, educ, by.x = "X", by.y = "CountryCode"))
dados
dados$National.accounts.reference.year
dados$National.accounts.base.year
dados
dados$System.of.National.Accounts
dados$Balance.of.Payments.Manual.in.use
dados$Source.of.most.recent.Income.and.expenditure.data
dados$Special.Notes
dados$Special.Notes[[Ff]iscal year (.*) [Jj]une]
dados$Special.Notes[dados$Special.Notes == "[Ff]iscal year (.*) [Jj]une"]
dados$Special.Notes == "[Ff]iscal year (.*) [Jj]une"
dados$Special.Notes == "[Ff]iscal"
dados$Special.Notes == [Ff]iscal
dados$Special.Notes == "^[Ff]iscal"
dados$Special.Notes
dados$Special.Notes == "^[Ff]iscal (.*)"
dados$Special.Notes == "^[Ff]iscal .*"
dados$Special.Notes == "\\^[Ff]iscal"
dados$Special.Notes == "Fiscal"
dados$Special.Notes == "Fiscal (.*)"
?str_extract
str_extract(dados$Special.Notes, "[F]iscal .* [Jj][Uu][Nn][Ee]")
library(stringr)
str_extract(dados$Special.Notes, "[F]iscal .* [Jj][Uu][Nn][Ee]")
?stringr
str_locate_all(dados$Special.Notes, "[F]iscal .* [Jj][Uu][Nn][Ee]")
str_extract(dados$Special.Notes, "[F]iscal .* [Jj][Uu][Nn][Ee]")
str_count(dados$Special.Notes, "[F]iscal .* [Jj][Uu][Nn][Ee]")
sum(str_count(dados$Special.Notes, "[F]iscal .* [Jj][Uu][Nn][Ee]"))
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
str(sampleTimes)
library(lubridate)
?lubridate
year(sampleTimes)==2012
sum(year(sampleTimes)==2012)
?lubridate
year(sampleTimes)==2012&wday(sampletimes == "Monday")
year(sampleTimes)==2012&wday(sampleTimes == "Monday")
year(sampleTimes)==2012 & wday(sampleTimes == "Monday")
wday(sampleTimes == "Monday")
wday(sampleTimes == "Monday", label = T)
str(sampleTimes)
str(amzn)
?POSIXct
head(sampleTimes,50)
wday(ymd(sampleTimes == "Monday", label = T)
)
?wday
wday(ymd(sampleTimes == "Monday"), label = T)
ymd(sampleTimes == "Monday")
?ymd
ymd(sampleTimes == "Monday")[1]
ymd((sampleTimes == "Monday")[1])
ymd(sampleTimes)
wday(ymd(sampleTimes), label = T), == "Monday")
wday(ymd(sampleTimes), label = T)
wday(ymd(sampleTimes), label = T), == "Monday"
wday(ymd(sampleTimes), label = T) == "Monday"
sum(wday(ymd(sampleTimes), label = T) == "Monday")
sum(wday(ymd(sampleTimes), label = T) == "Mon")
sum(year(sampleTimes)==2012 & wday(ymd(sampleTimes), label = T), == "Mon"))
sum(year(sampleTimes)==2012 & wday(ymd(sampleTimes), label = T) == "Mon"))
sum(year(sampleTimes)==2012 & wday(ymd(sampleTimes), label = T) == "Mon")
?read.table
?scan
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
BodyWeight
library(datasets)
data(airquality)
str(airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(airquality)
qplot(Wind, Ozone, date = airquality, facets = . ~ Month)
head(as.factor(airquality$Month))
qplot(Wind, Ozone, date = airquality, facets = . ~ airquality$Month)
qplot(Wind, Ozone, date = airquality, facets = . ~ airquality$Month)
qplot(Wind, Ozone, date = airquality, shapes = Monthe)
qplot(Wind, Ozone, date = airquality, shapes = Month)
airquality = transform(airquality, Month = factor(Month))
str(airquality)
?transform
qplot(Wind, Ozone, date = airquality, facets = . ~ Month)
qplot(Wind, Ozone, date = airquality, facets = .~Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, colors = )
qplot(Wind, Ozone, data = airquality, colors = Month)
qplot(Wind, Ozone, data = airquality, colors = . ~ Month)
?qplot
qplot(Wind, Ozone, data = airquality, colour = . ~ Month)
qplot(Wind, Ozone, data = airquality, colour = Month)
qplot(Wind, Ozone, data = airquality, shapes = Month)
qplot(Wind, Ozone, data = airquality, shape = Month)
str(votes)
load(votes)
str(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
?geom_smooth
summary(cars)
plot(cars)
clear
setwd("Dropbox/Data science/5-Reproducible Research//RepData_PeerAssessment1")
setwd("~")
setwd("Dropbox/Data science/5-Reproducible Research/RepData_PeerAssessment1")
setwd("~")
setwd("Dropbox/Data science/5-Reproducible Research/RepData_PeerAssessment1")
dados<-read.csv("activity.csv", h = T)
str(dados)
head(dados)
library(lubridate)
?transform
head(date)
head(dados$date)
ymd(head(dados$date))
transform(dados, date = ymd(date))
str(dados)
dados<-transform(dados, date = ymd(date))
str(dados)
dados$interval
?mean
mean(dados$steps~dados$date)
mean(dados$steps~dados$date, na.rm = T)
mean(dados$steps,dados$date, na.rm = T)
hist(dados$steps, dados$date, na.rm = T)
hist(dados$steps ~ dados$date, na.rm = T)
hist(dados$steps, na.rm = T)
library(dplyr)
lapply
?lapply
?filter
dados
dados<-tbl_df(dados)
dados
filter(dados, date)
group_by(dados, date)
mean(dados)
mean(date)
mean(dados$date)
summarise(dados, date)
summarise(dados, mean(date))
summarise(dados, mean(steps))
summarise(dados, mean(steps, na.rm = T))
dados
dados<-group_by(dados, date)
summarise(dados, mean(steps, na.rm = T))
dados
dados
summarise(dados, median(steps, na.rm = T))
?media
?median
summarise(dados, median(steps, na.rm = T))
dados
head(dados, 100)
head(dados, 300)
head(dados, 300)
dados
head(dados$steps,300)
summarise(dados, mean(steps, na.rm = T))
summarise(dados, median(steps, na.rm = T))
summarise(dados, median(steps))
dados
summarise(dados, sum(steps, na.rm = T))
mean(summarise(dados, sum(steps, na.rm = T)))
summarise(dados, sum(steps, na.rm = T))
summarise(dados, sum(steps, na.rm = T) as totalsteps)
?summarise
ungroup(dados)
summarise(group_by(dados,date), sum(steps, na.rm = T) as totalsteps)
summarise(group_by(dados,date), sum(steps, na.rm = T))
gdados<-summarise(group_by(dados,date), sum(steps, na.rm = T))
names(gdados)
gdados<-summarise(group_by(dados,date), sum(steps, na.rm = T), mean(disp))
gdados
gdados<-summarise(group_by(dados,date), sum(steps, na.rm = T) as "asdf")
names(gdados)<-c("date", "sumSteps")
gdados
mean(gdados$sumSteps)
median(gdados$sumSteps)
hist(dgados)
hist(gdados)
hist(gdados$sumSteps)
?hist
hist(gdados$sumSteps, breaks = gdados$date)
gdados(date)
head(gdados$date)
gdados$date
hist(gdados$sumSteps, breaks = 61)
gdados
dados
ungroup(dados)
dados
daDados<-summarise(group_by(dados,inteval, mean(steps, na.rm = T))
)
daDados<-summarise(group_by(dados,interval, mean(steps, na.rm = T))
)
daDados
gdados
daDados<-summarise(group_by(dados,interval), mean(steps, na.rm = T)))
daDados<-summarise(group_by(dados,interval), mean(steps, na.rm = T))
daDados
plot(daDados$interval, dados$date, type = l)
daDados<-summarise(group_by(dados,interval, date), mean(steps, na.rm = T))
daDados
group_by(dados,interval)
?summarise
daDados<-summarise(group_by(dados,interval), mean(steps, na.rm = T))
daDados
dados
daDados<-summarise(group_by(dados,interval), mean(steps, na.rm = T))
daDados
group_by(dados,interval, date)
daDados
names(daDados)<-c(interval, meanSteps)
names(daDados)<-c("interval","meanSteps"")
)
)
"
names(daDados)<-c("interval","meanSteps")
plot(daDados$interval, daDados$meanSteps, type = l)
plot(daDados$interval, daDados$meanSteps, type = "l")
?max
max(daDados$meanSteps)
pmax(daDados$meanSteps)
plot(daDados$interval, daDados$meanSteps, type = "l")
max(daDados$meanSteps)
plot(daDados$interval, daDados$meanSteps, type = "l", xlab = "5-minute intevals", ylab = "Average number of steps")
?select
select(daDados, meanSteps == max(daDados$meanSteps))
daDados$meanSteps
daDados[meanSteps == max(daDados$meanSteps),]
daDados[daDados$meanSteps == max(daDados$meanSteps),]
daDados[daDados$meanSteps == max(daDados$meanSteps),]$interval
daDados[daDados$meanSteps == max(daDados$meanSteps),]$interval
